name: Nubadoo API Pipeline

on:
    push:
        branches:
          - main
    workflow_dispatch:

jobs:

  package:
    name: Maven Package (no tests)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
      - name: Maven Package
        run: mvn -B clean package -DskipTests

  test:
    name: Maven Tests
    needs: package
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
      - name: Maven Verify
        run: mvn -B clean verify

  deploy:
    name: Railway Deploy
    needs: test

    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Install Railway
        run: npm i -g @railway/cli

      - name: Deploy
        run: railway up --service 27d18496-a190-4796-83fd-a1c16baf7cc5 --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  documentation:
    runs-on: ubuntu-latest
    needs: package

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs the Maven dokka task
      - name: Dokka with Maven
        run: mvn -B dokka:dokka

      # Upload to DX site
      - name: Upload KDocs to DX site
        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          source: 'target/documentation/dokka'
          dest: 's3://developer.nubadoo.com/kdocs'
          flags: --recursive

      #Clears the CloudFront cache so new requests will receive the latest version of your app
      - name: Invalidate Cloudfront
        uses: chetan/invalidate-cloudfront-action@v1.3
        env:
          DISTRIBUTION: ${{ secrets.DISTRIBUTION }}
          PATHS: '/*'
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Builds a zip file with the KDoc generated website in it
      - name: Archive KDoc Documentation
        uses: actions/upload-artifact@v3
        with:
          name: KDoc Documentation Site
          path: target/documentation/dokka

  coverage:
    runs-on: ubuntu-latest
    needs: package

    steps:
      - uses: actions/checkout@v2

      - name: Set up the Java JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build with Maven
        run: mvn -B test

      - name: Generate JaCoCo Badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2

      - name: Log coverage percentage
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

      #  Need a solution to commiting badge
      #- name: Commit and push the badge (if it changed)
      #  uses: EndBug/add-and-commit@v7
      #  with:
      #    default_author: github_actions
      #    message: 'commit badge'
      #    add: '*.svg'

      # Upload the coverage report as an artifact
      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: target/site/jacoco/

      # Upload to DX site
      - name: Upload JaCoCo coverage report to DX site
        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          source: 'target/site/jacoco/'
          dest: 's3://developer.nubadoo.com/coverage'
          flags: --recursive

      #Clears the CloudFront cache so new requests will receive the latest version of your app
      - name: Invalidate Cloudfront
        uses: chetan/invalidate-cloudfront-action@v1.3
        env:
          DISTRIBUTION: ${{ secrets.DISTRIBUTION }}
          PATHS: '/*'
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
